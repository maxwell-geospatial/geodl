}else if(c2 > across_cnt && r2 <= down_cnt){ # Last column
c1b <- across_cnt - (size-1)
c2b <- across_cnt
chip_data <- img1[r1:r2, c1b:c2b, 1:n_channels]
mask_data <- mask1[r1:r2, c1b:c2b, 1]
}else if(c2 <= across_cnt && r2 > down_cnt){ #Last row
r1b <- down_cnt - (size-1)
r2b <- down_cnt
chip_data <- img1[r1b:r2b, c1:c2, 1:n_channels]
mask_data <- mask1[r1b:r2b, c1:c2, 1]
}else{ # Last row, last column
c1b <- across_cnt - (size -1)
c2b <- across_cnt
r1b <- down_cnt - (size -1)
r2b <- down_cnt
chip_data <- img1[r1b:r2b, c1b:c2b, 1:n_channels]
mask_data <- mask1[r1b:r2b, c1b:c2b, 1]
}
chip_data2 <- c(stack(chip_data)[,1])
chip_array <- array(chip_data2, c(size,size,n_channels))
image1 <- as.cimg(chip_array, x=size, y=size, cc=n_channels)
imager::save.image(image1, paste0(outDir, "/images/", substr(fName, 1, nchar(image)-4), "_", c1, "_", r1, ".png"))
names(mask_data) <- c("C")
Cx <- as.vector(mask_data$C)
mask_array <- array(Cx, c(size,size,1))
msk1 <- as.cimg(mask_array, x=size, y=size, cc=1)
imager::save.image(msk1, paste0(outDir, "/masks/", substr(fName, 1, nchar(image)-4), "_", c1, "_", r1, ".png"))
}
}
}else if(mode == "Positive"){
img1 <- rast(image)
mask1 <- rast(mask)
fName = basename(image)
dir.create(paste0(outDir, "/images"))
dir.create(paste0(outDir, "/masks"))
across_cnt = ncol(img1)
down_cnt = nrow(img1)
tile_size_across = size
tile_size_down = size
overlap_across = stride_x
overlap_down = stride_y
across <- ceiling(across_cnt/overlap_across)
down <- ceiling(down_cnt/overlap_down)
across_add <- (across*overlap_across)-across_cnt
across_seq <- seq(0, across-1, by=1)
down_seq <- seq(0, down-1, by=1)
across_seq2 <- (across_seq*overlap_across)+1
down_seq2 <- (down_seq*overlap_down)+1
#Loop through row/column combinations to make predictions for entire image
for (c in across_seq2){
for (r in down_seq2){
c1 <- c
r1 <- r
c2 <- c + (size-1)
r2 <- r + (size-1)
if(c2 <= across_cnt && r2 <= down_cnt){ #Full chip
chip_data <- img1[r1:r2, c1:c2, 1:n_channels]
mask_data <- mask1[r1:r2, c1:c2, 1]
}else if(c2 > across_cnt && r2 <= down_cnt){ # Last column
c1b <- across_cnt - (size-1)
c2b <- across_cnt
chip_data <- img1[r1:r2, c1b:c2b, 1:n_channels]
mask_data <- mask1[r1:r2, c1b:c2b, 1]
}else if(c2 <= across_cnt && r2 > down_cnt){ #Last row
r1b <- down_cnt - (size-1)
r2b <- down_cnt
chip_data <- img1[r1b:r2b, c1:c2, 1:n_channels]
mask_data <- mask1[r1b:r2b, c1:c2, 1]
}else{ # Last row, last column
c1b <- across_cnt - (size -1)
c2b <- across_cnt
r1b <- down_cnt - (size -1)
r2b <- down_cnt
chip_data <- img1[r1b:r2b, c1b:c2b, 1:n_channels]
mask_data <- mask1[r1b:r2b, c1b:c2b, 1]
}
chip_data2 <- c(stack(chip_data)[,1])
chip_array <- array(chip_data2, c(size,size,n_channels))
image1 <- as.cimg(chip_array, x=size, y=size, cc=n_channels)
names(mask_data) <- c("C")
Cx <- as.vector(mask_data$C)
mask_array <- array(Cx, c(sizes,size,1))
msk1 <- as.cimg(mask_array, x=size, y=size, cc=1)
if(max(mask_array) > 0){
imager::save.image(image1, paste0(outDir, "/images/", substr(fName, 1, nchar(image)-4), "_", c1, "_", r1, ".png"))
imager::save.image(msk1, paste0(outDir, "/masks/", substr(fName, 1, nchar(image)-4), "_", c1, "_", r1, ".png"))
}
}
}
}else if(mode=="Divided") {
img1 <- rast(image)
mask1 <- rast(mask)
fName = basename(image)
dir.create(paste0(outDir, "/images"))
dir.create(paste0(outDir, "/masks"))
dir.create(paste0(outDir, "/images/positive"))
dir.create(paste0(outDir, "/images/background"))
dir.create(paste0(outDir, "/masks/positive"))
dir.create(paste0(outDir, "/masks/background"))
across_cnt <- ncol(img1)
down_cnt <- nrow(img1)
tile_size_across <- size
tile_size_down <- size
overlap_across <- stride_x
overlap_down <- stride_y
across <- ceiling(across_cnt/overlap_across)
down <- ceiling(down_cnt/overlap_down)
across_add <- (across*overlap_across)-across_cnt
across_seq <- seq(0, across-1, by=1)
down_seq <- seq(0, down-1, by=1)
across_seq2 <- (across_seq*overlap_across)+1
down_seq2 <- (down_seq*overlap_down)+1
#Loop through row/column combinations to make predictions for entire image
for (c in across_seq2){
for (r in down_seq2){
c1 <- c
r1 <- r
c2 <- c + (size-1)
r2 <- r + (size-1)
if(c2 <= across_cnt && r2 <= down_cnt){ #Full chip
chip_data <- img1[r1:r2, c1:c2, 1:n_channels]
mask_data <- mask1[r1:r2, c1:c2, 1]
}else if(c2 > across_cnt && r2 <= down_cnt){ # Last column
c1b <- across_cnt - (size-1)
c2b <- across_cnt
chip_data <- img1[r1:r2, c1b:c2b, 1:n_channels]
mask_data <- mask1[r1:r2, c1b:c2b, 1]
}else if(c2 <= across_cnt && r2 > down_cnt){ #Last row
r1b <- down_cnt - (size-1)
r2b <- down_cnt
chip_data <- img1[r1b:r2b, c1:c2, 1:n_channels]
mask_data <- mask1[r1b:r2b, c1:c2, 1]
}else{ # Last row, last column
c1b <- across_cnt - (size -1)
c2b <- across_cnt
r1b <- down_cnt - (size -1)
r2b <- down_cnt
chip_data <- img1[r1b:r2b, c1b:c2b, 1:n_channels]
mask_data <- mask1[r1b:r2b, c1b:c2b, 1]
}
chip_data2 <- c(stack(chip_data)[,1])
chip_array <- array(chip_data2, c(size,size,n_channels))
image1 <- as.cimg(chip_array, x=size, y=size, cc=n_channels)
names(mask_data) <- c("C")
Cx <- as.vector(mask_data$C)
mask_array <- array(Cx, c(size,size,1))
msk1 <- as.cimg(mask_array, x=size, y=size, cc=1)
if(max(mask_array) > 0){
imager::save.image(image1, paste0(outDir, "/images/positive/", substr(fName, 1, nchar(image)-4), "_", c1, "_", r1, ".png"))
imager::save.image(msk1, paste0(outDir, "/masks/positive/", substr(fName, 1, nchar(image)-4), "_", c1, "_", r1, ".png"))
}else{
imager::save.image(image1, paste0(outDir, "/images/background/", substr(fName, 1, nchar(image)-4), "_", c1, "_", r1, ".png"))
imager::save.image(msk1, paste0(outDir, "/masks/background/", substr(fName, 1, nchar(image)-4), "_", c1, "_", r1, ".png"))
}
}
}
} else {
print("Invalid Mode Provided.")
}
}
chipIt(image= "C:/Maxwell_Data/topo_data/topoDL/topoSub/KY_Adams_708051_1971_24000_geo.tif",
mask="C:/Maxwell_Data/topo_data/topoDL/masksSub/KY_Adams_708051_1971_24000_geo.tif",
n_channels=3,
size=512, stride_x=512, stride_y=512,
outDir= "C:/Maxwell_Data/topo_data/topoDL/chips/",
mode="Divided")
describeChips(folder, extension, mode){
lstChips <- list.files(folder, pattern=paste0("\\", extension, "$"))
return(lstChips)
}
describeChips <- function(folder, extension, mode){
lstChips <- list.files(folder, pattern=paste0("\\", extension, "$"))
return(lstChips)
}
imgDF <- data.frame(img1)
View(imgDF)
mean(imgDF$KY__1)
std(imgDF$KY__1)
sd(imgDF$KY__1)
describe(imgDF)
describe(imgDF)
summary(imgDF)
chipsDF <- imgDF
nCols <- ncols(chipDF)
nCols <- ncol(chipDF)
nCols <- ncol(chipDF)
chipDF <- imgDF
nCols <- ncol(chipDF)
colNames <- paste0("B", seq(1,nCols))
names(chipsDF) <- colNames
outStats <- summary(chipsDF)
outStats
mskIn <- mask1
mskInDF <- freq(maskIn)
mskInDF <- freq(mskIn)
View(mskInDF)
makeChipsDF <- function(folder, extension, mode="All", shuffle=FALSE){
if(mode == "All" | model == "Positive"){
lstChips <- list.files(paste0(folder, "images/"), pattern=paste0("\\", extension, "$"))
lstChipsPath <- paste0(folder, "images/", lstChips)
lstMasksPath <- paste0(folder, "masks/", lstChips)
chipDF <- data.frame(chpN=lstChips, chpPath=lstChipsPath, mskPath=lstMasksPath)
}else{
lstChipsB <- list.files(paste0(folder, "images/background/"), pattern=paste0("\\", extension, "$"))
lstChipsP <- list.files(paste0(folder, "images/positive/"), pattern=paste0("\\", extension, "$"))
lstChipsPathB <- paste0(folder, "images/background/", lstChips)
lstMasksPathB <- paste0(folder, "masks/background/", lstChips)
lstChipsPathP <- paste0(folder, "images/background/", lstChips)
lstMasksPathP <- paste0(folder, "masks/background/", lstChips)
chipDFB <- data.frame(chpN=lstChipsB, chpPath=lstChipsPathB, mskPath=lstMasksPathB)
chipDFP <- data.frame(chpN=lstChipsP, chpPath=lstChipsPathP, mskPath=lstMasksPathP)
chipDF <- bind_cols(chipDFB, chipDFP)
}
if(shuffle=TRUE){
chipDF <- chipDF %>% sample_n(nrow(chipDF, replace=FALSE))
}
return(chipDF)
}
makeChipsDF <- function(folder, extension, mode="All", shuffle=FALSE){
if(mode == "All" | model == "Positive"){
lstChps <- list.files(paste0(folder, "images/"), pattern=paste0("\\", extension, "$"))
lstChpsPth <- paste0(folder, "images/", lstChps)
lstMsksPth <- paste0(folder, "masks/", lstChps)
chpDF <- data.frame(chp=lstChips, chpPth=lstChpsPth, mskPth=lstMsksPth)
}else{
lstChpsB <- list.files(paste0(folder, "images/background/"), pattern=paste0("\\", extension, "$"))
lstChpsP <- list.files(paste0(folder, "images/positive/"), pattern=paste0("\\", extension, "$"))
lstChpsPthB <- paste0(folder, "images/background/", lstChps)
lstMsksPthB <- paste0(folder, "masks/background/", lstChps)
lstChpsPthP <- paste0(folder, "images/background/", lstChps)
lstMsksPthP <- paste0(folder, "masks/background/", lstChps)
chpDFB <- data.frame(chpN=lstChpsB, chpPath=lstChpsPthB, mskPth=lstMsksPthB)
chpDFP <- data.frame(chpN=lstChpsP, chpPath=lstChpsPthP, mskPth=lstMsksPthP)
chpDF <- bind_cols(chpDFB, chpDFP)
}
if(shuffle=TRUE){
chpDF <- chpDF %>% sample_n(nrow(chpDF), replace=FALSE)
}
return(chpDF)
}
makeChipsDF <- function(folder, extension, mode="All", shuffle=FALSE){
if(mode == "All" | model == "Positive"){
lstChps <- list.files(paste0(folder, "images/"), pattern=paste0("\\", extension, "$"))
lstChpsPth <- paste0(folder, "images/", lstChps)
lstMsksPth <- paste0(folder, "masks/", lstChps)
chpDF <- data.frame(chp=lstChips, chpPth=lstChpsPth, mskPth=lstMsksPth)
}else{
lstChpsB <- list.files(paste0(folder, "images/background/"), pattern=paste0("\\", extension, "$"))
lstChpsP <- list.files(paste0(folder, "images/positive/"), pattern=paste0("\\", extension, "$"))
lstChpsPthB <- paste0(folder, "images/background/", lstChps)
lstMsksPthB <- paste0(folder, "masks/background/", lstChps)
lstChpsPthP <- paste0(folder, "images/background/", lstChps)
lstMsksPthP <- paste0(folder, "masks/background/", lstChps)
chpDFB <- data.frame(chpN=lstChpsB, chpPath=lstChpsPthB, mskPth=lstMsksPthB)
chpDFP <- data.frame(chpN=lstChpsP, chpPath=lstChpsPthP, mskPth=lstMsksPthP)
chpDF <- bind_cols(chpDFB, chpDFP)
}
if(shuffle=TRUE){
chpDF <- chpDF %>% sample_n(nrow(chpDF), replace=FALSE)
}
return(chpDF)
}
makeChipsDF <- function(folder, extension, mode="All", shuffle=FALSE){
if(mode == "All" | model == "Positive"){
lstChps <- list.files(paste0(folder, "images/"), pattern=paste0("\\", extension, "$"))
lstChpsPth <- paste0(folder, "images/", lstChps)
lstMsksPth <- paste0(folder, "masks/", lstChps)
chpDF <- data.frame(chp=lstChips, chpPth=lstChpsPth, mskPth=lstMsksPth)
}else{
lstChpsB <- list.files(paste0(folder, "images/background/"), pattern=paste0("\\", extension, "$"))
lstChpsP <- list.files(paste0(folder, "images/positive/"), pattern=paste0("\\", extension, "$"))
lstChpsPthB <- paste0(folder, "images/background/", lstChps)
lstMsksPthB <- paste0(folder, "masks/background/", lstChps)
lstChpsPthP <- paste0(folder, "images/background/", lstChps)
lstMsksPthP <- paste0(folder, "masks/background/", lstChps)
chpDFB <- data.frame(chpN=lstChpsB, chpPath=lstChpsPthB, mskPth=lstMsksPthB)
chpDFP <- data.frame(chpN=lstChpsP, chpPath=lstChpsPthP, mskPth=lstMsksPthP)
chpDF <- bind_cols(chpDFB, chpDFP)
}
if(shuffle == TRUE){
chpDF <- chpDF %>% sample_n(nrow(chpDF), replace=FALSE)
}
return(chpDF)
}
myChps <- makeChipsDF(folder="C:/Maxwell_Data/topo_data/topoDL/chips/", extension="png", mode="Divided", shuffle=TRUE)
makeChipsDF <- function(folder, extension, mode="All", shuffle=FALSE){
if(mode == "All" | mode == "Positive"){
lstChps <- list.files(paste0(folder, "images/"), pattern=paste0("\\", extension, "$"))
lstChpsPth <- paste0(folder, "images/", lstChps)
lstMsksPth <- paste0(folder, "masks/", lstChps)
chpDF <- data.frame(chp=lstChips, chpPth=lstChpsPth, mskPth=lstMsksPth)
}else{
lstChpsB <- list.files(paste0(folder, "images/background/"), pattern=paste0("\\", extension, "$"))
lstChpsP <- list.files(paste0(folder, "images/positive/"), pattern=paste0("\\", extension, "$"))
lstChpsPthB <- paste0(folder, "images/background/", lstChps)
lstMsksPthB <- paste0(folder, "masks/background/", lstChps)
lstChpsPthP <- paste0(folder, "images/background/", lstChps)
lstMsksPthP <- paste0(folder, "masks/background/", lstChps)
chpDFB <- data.frame(chpN=lstChpsB, chpPath=lstChpsPthB, mskPth=lstMsksPthB)
chpDFP <- data.frame(chpN=lstChpsP, chpPath=lstChpsPthP, mskPth=lstMsksPthP)
chpDF <- bind_cols(chpDFB, chpDFP)
}
if(shuffle == TRUE){
chpDF <- chpDF %>% sample_n(nrow(chpDF), replace=FALSE)
}
return(chpDF)
}
myChps <- makeChipsDF(folder="C:/Maxwell_Data/topo_data/topoDL/chips/", extension="png", mode="Divided", shuffle=TRUE)
makeChipsDF <- function(folder, extension, mode="All", shuffle=FALSE){
if(mode == "All" | mode == "Positive"){
lstChps <- list.files(paste0(folder, "images/"), pattern=paste0("\\", extension, "$"))
lstChpsPth <- paste0(folder, "images/", lstChps)
lstMsksPth <- paste0(folder, "masks/", lstChps)
chpDF <- data.frame(chp=lstChips, chpPth=lstChpsPth, mskPth=lstMsksPth)
}else{
lstChpsB <- list.files(paste0(folder, "images/background/"), pattern=paste0("\\", extension, "$"))
lstChpsP <- list.files(paste0(folder, "images/positive/"), pattern=paste0("\\", extension, "$"))
lstChpsPthB <- paste0(folder, "images/background/", lstChpsB)
lstMsksPthB <- paste0(folder, "masks/background/", lstChpsB)
lstChpsPthP <- paste0(folder, "images/background/", lstChpsP)
lstMsksPthP <- paste0(folder, "masks/background/", lstChpsP)
chpDFB <- data.frame(chpN=lstChpsB, chpPath=lstChpsPthB, mskPth=lstMsksPthB)
chpDFP <- data.frame(chpN=lstChpsP, chpPath=lstChpsPthP, mskPth=lstMsksPthP)
chpDF <- bind_cols(chpDFB, chpDFP)
}
if(shuffle == TRUE){
chpDF <- chpDF %>% sample_n(nrow(chpDF), replace=FALSE)
}
return(chpDF)
}
myChps <- makeChipsDF(folder="C:/Maxwell_Data/topo_data/topoDL/chips/", extension="png", mode="Divided", shuffle=TRUE)
library(dplyr)
myChps <- makeChipsDF(folder="C:/Maxwell_Data/topo_data/topoDL/chips/", extension="png", mode="Divided", shuffle=TRUE)
makeChipsDF <- function(folder, extension, mode="All", shuffle=FALSE){
if(mode == "All" | mode == "Positive"){
lstChps <- list.files(paste0(folder, "images/"), pattern=paste0("\\", extension, "$"))
lstChpsPth <- paste0(folder, "images/", lstChps)
lstMsksPth <- paste0(folder, "masks/", lstChps)
chpDF <- data.frame(chp=lstChips, chpPth=lstChpsPth, mskPth=lstMsksPth)
}else{
lstChpsB <- list.files(paste0(folder, "images/background/"), pattern=paste0("\\", extension, "$"))
lstChpsP <- list.files(paste0(folder, "images/positive/"), pattern=paste0("\\", extension, "$"))
lstChpsPthB <- paste0(folder, "images/background/", lstChpsB)
lstMsksPthB <- paste0(folder, "masks/background/", lstChpsB)
lstChpsPthP <- paste0(folder, "images/background/", lstChpsP)
lstMsksPthP <- paste0(folder, "masks/background/", lstChpsP)
chpDFB <- data.frame(chpN=lstChpsB, chpPath=lstChpsPthB, mskPth=lstMsksPthB)
chpDFP <- data.frame(chpN=lstChpsP, chpPath=lstChpsPthP, mskPth=lstMsksPthP)
chpDF <- bind_rows(chpDFB, chpDFP)
}
if(shuffle == TRUE){
chpDF <- chpDF %>% sample_n(nrow(chpDF), replace=FALSE)
}
return(chpDF)
}
myChps <- makeChipsDF(folder="C:/Maxwell_Data/topo_data/topoDL/chips/", extension="png", mode="Divided", shuffle=TRUE)
View(myChps)
makeChipsDF <- function(folder, extension, mode="All", shuffle=FALSE){
if(mode == "All" | mode == "Positive"){
lstChps <- list.files(paste0(folder, "images/"), pattern=paste0("\\", extension, "$"))
lstChpsPth <- paste0(folder, "images/", lstChps)
lstMsksPth <- paste0(folder, "masks/", lstChps)
chpDF <- data.frame(chp=lstChips, chpPth=lstChpsPth, mskPth=lstMsksPth)
}else{
lstChpsB <- list.files(paste0(folder, "images/background/"), pattern=paste0("\\", extension, "$"))
lstChpsP <- list.files(paste0(folder, "images/positive/"), pattern=paste0("\\", extension, "$"))
lstChpsPthB <- paste0(folder, "images/background/", lstChpsB)
lstMsksPthB <- paste0(folder, "masks/background/", lstChpsB)
lstChpsPthP <- paste0(folder, "images/background/", lstChpsP)
lstMsksPthP <- paste0(folder, "masks/background/", lstChpsP)
chpDFB <- data.frame(chpN=lstChpsB, chpPath=lstChpsPthB, mskPth=lstMsksPthB)
chpDFP <- data.frame(chpN=lstChpsP, chpPath=lstChpsPthP, mskPth=lstMsksPthP)
chpDFP$division <- "Postive"
chpDFB$division <- "Backround"
chpDF <- bind_rows(chpDFB, chpDFP)
}
if(shuffle == TRUE){
chpDF <- chpDF %>% sample_n(nrow(chpDF), replace=FALSE)
}
return(chpDF)
}
myChps <- makeChipsDF(folder="C:/Maxwell_Data/topo_data/topoDL/chips/", extension="png", mode="Divided", shuffle=TRUE)
View(myChps)
cData <- read_csv("C:/myFiles/work/multiClassExample.csv")
library(readr)
cData <- read_csv("C:/myFiles/work/multiClassExample.csv")
View(cData)
library(forcats)
cData2 <- data.frame(ref=as.factor(cData$GrundTruth), pred=as.factor(cData$predVal))
cData2 <- data.frame(ref=as.factor(cData$GrndTruth), pred=as.factor(cData$predVal))
cData2 <- fct_recode(cData2, 1="forest",
cData2 <- fct_recode(cData2$ref, 1 = "forest",
cData2 <- fct_recode(cData2$ref, "1" = "forest",
"2" = "low veg",
"3" = "barren",
"4" = "water",
"5" = "impervous",
"6" = "mixed dev")
library(readr)
library(forcats)
cData <- read_csv("C:/myFiles/work/multiClassExample.csv")
cData2 <- data.frame(ref=as.factor(cData$GrndTruth), pred=as.factor(cData$predVal))
cData2$ref <- fct_recode(cData2$ref, "1" = "forest",
"2" = "low veg",
"3" = "barren",
"4" = "water",
"5" = "impervous",
"6" = "mixed dev")
cData2 <- data.frame(ref=as.factor(cData$GrndTruth), pred=as.factor(cData$predVal))
cData2$ref <- fct_recode(cData2$ref,
forest = 1,
low veg = 2,
cData2$ref <- fct_recode(cData2$ref,
forest = "1",
low veg = "2",
cData2 <- data.frame(ref=as.factor(cData$GrndTruth), pred=as.factor(cData$predVal))
cData2$ref <- fct_recode(cData2$ref,
"forest" = "1",
"low veg" = "2",
"barren" = "3",
"water" = "4",
"imperv" = "5",
"mix dev" = "6")
cData2$pred <- fct_recode(cData2$pred,
"forest" = "1",
"low veg" = "2",
"barren" = "3",
"water" = "4",
"imperv" = "5",
"mix dev" = "6")
table(cData2$ref, cData2$pred)
write_csv(cData2. "C:/myFiles/work/multiClassExample2.csv")
write_csv(cData2, "C:/myFiles/work/multiClassExample2.csv")
cData <- read_csv("C:/myFiles/work/binaryExample.csv")
View(cData)
cData2 <- data.frame(ref=as.factor(cData$GrndTruth), pred=as.factor(cData$Classified))
cData2$ref <- fct_recode(cData2$ref,
"Not Mine" = "1",
"Mine" = "2")
cData2$pred <- fct_recode(cData2$pred,
"Not Mine" = "1",
"Mine" = "2")
cData <- read_csv("C:/myFiles/work/binaryExample.csv")
cData2 <- data.frame(ref=as.factor(cData$GrndTruth), pred=as.factor(cData$Classified))
cData2$ref <- fct_recode(cData2$ref,
"Not Mine" = "1",
"Mine" = "255")
cData2$pred <- fct_recode(cData2$pred,
"Not Mine" = "1",
"Mine" = "255")
cData <- read_csv("C:/myFiles/work/binaryExample.csv")
cData2 <- data.frame(ref=as.factor(cData$GrndTruth), pred=as.factor(cData$Classified))
cData2$ref <- fct_recode(cData2$ref,
"Not Mine" = "0",
"Mine" = "255")
cData2$pred <- fct_recode(cData2$pred,
"Not Mine" = "0",
"Mine" = "255")
write_csv(cData2, "C:/myFiles/work/binaryExample2.csv")
library(devtools)
install.packages("devtools")
library(devtools)
usethis::use_gpl3_license()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(geodl)
devtools::build_manual()
rlang::last_trace()
devtools::build_readme()
devtools::build_readme()
library(geodl)
help(assessPnts)
help(geodl::assessPnts)
?assessPnts
??assessPnts
library(geodl)
library(geodl)
help(assessPnt)
devtools::buld_readme()
devtools::build_readme()
devtools::build_readme("geodl")
devtools::build_readme()
devtools::build_manual()
devtools::build_manual("geodl")
devtools::build_manual("C:/Users/vidcg/Dropbox/code_dev/geodl/geodl")
install.packages("tinytex")
devtools::build_manual("C:/Users/vidcg/Dropbox/code_dev/geodl/geodl")
tinytex::tlmgr_install("makeindex")
tinytext::reinstall_tinytex()
library(tinytext)
library(tinytex)
tinytex::reinstall_tinytex()
devtools::build_readme("C:/Users/vidcg/Dropbox/code_dev/geodl/geodl")
install.packages("roxygen2md")
roxygen2md::roxygen2md()
sewd("C:/Users/vidcg/Dropbox/code_dev/geodl/geodl")
setwd("C:/Users/vidcg/Dropbox/code_dev/geodl/geodl")
roxygen2md::roxygen2md()
devtools::document()
devtools::document()
roxygen2md::find_rd()
roxygen2md::roxygen2md("geodl")
roxygen2md::roxygen2md("full")
roxygen2md::roxygen2md()
install.packages("Rd2md")
getwd()
Rd2md::ReferenceManual(pkg=getwd(), outdir=getwd())
getwd()
