% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/defineUnet.R
\name{baseUNet}
\alias{baseUNet}
\title{baseUnet}
\usage{
baseUNet(
  nChn = 3,
  nCls,
  encoderChn = c(16, 32, 64, 128),
  decoderChn = c(128, 64, 32, 16),
  botChn = 256,
  useLeaky = FALSE,
  negative_slope = 0.01
)
}
\arguments{
\item{nChn}{Number of channels, bands, or predictor variables in the input
image or raster data. Default is 3.}

\item{nCls}{Number of classes being differentiated. For a binary classification,
this can be either 1 or 2. If 2, the problem is treated as a multiclass problem,
and a multiclass loss metric should be used.}

\item{encoderChn}{Vector of 4 integers defining the number of output
feature maps for each of the four encoder blocks. Default is 16, 32, 64, and 128.}

\item{decoderChn}{Vector of 4 integers defining the number of output feature
maps for each of the 4 decoder blocks. Default is 128, 64, 32, and 16.}

\item{botChn}{Number of output feature maps from the bottleneck block. Default
is 256.}

\item{useLeaky}{TRUE or FALSE. If TRUE, leaky ReLU activation is used as opposed
to ReLU. If FALSE, ReLU is used. Default is FALSE.}

\item{negative_slope}{If useLeaky is TRUE, specifies the negative slope term
to use. Default is 0.01.}
}
\value{
Instantiated UNet model as subclass of torch::nn_module(). If used to
infer new data, will return a tensor of predicted logits.
}
\description{
Define a basic UNet architecture for semantic segmentation.
}
\details{
Define a basic Unet architecture with 4 blocks in the encoder, a bottleneck
block, and 4 blocks in the decoder. UNet can accept a variable number of input
channels, and the user can define the number of feature maps produced in each
encoder and decoder block and the bottleneck. When the UNet is used to predict to
new data, it will return either the positive class logit, in the case of a binary
classification, or a logit for each class in the case of a multiclass classification.
}
