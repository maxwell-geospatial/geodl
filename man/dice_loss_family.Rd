% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/torchRLosses.R
\name{dice_loss_family}
\alias{dice_loss_family}
\title{dice_loss_family}
\usage{
dice_loss_family(
  pred,
  target,
  nCls,
  smooth = 1,
  mode = "multiclass",
  alpha = 0.5,
  beta = 0.5,
  gamma = 1,
  average = "micro",
  tversky = FALSE,
  focal = FALSE,
  combo = FALSE,
  useWghts = FALSE,
  wghts,
  ceWght,
  chnDim = TRUE,
  mskLong = TRUE
)
}
\arguments{
\item{smooth}{Smooth factor to aid in stability and to prevent divide-by-zero errors.
Default is 1.}

\item{mode}{Either "multiclass" or "binary". Default is "multiclass". If "multiclass",
the prediction should be provided as (Batch, Channel, Height, Width), where the channel
dimension provides the predicted logit for each class, and the target should be
(Batch, Channel, Height, Width), where the channel dimension provides the index
for the correct class. Script assumes class indices start at 0 as opposed to 1.
If "binary", the prediction should be provided as
(Batch, Channel, Height, Width), where the channel dimension provides the
predicted logit for the positive class, and the target should be
(Batch, Channel, Height, Width), where the channel dimension provides the index
for the correct class (0 = negative, 1 = Positive). If the target does not included
the channel dimension (i.e. (Batch, Height, Width)), the chnDim argument should be set
to FALSE, which will force the script to add the channel dimension. It is best to
provide targets in a torch_long data type. If not, the script will convert the targets
to long. Predictions should be provided as logits, and a softmax or sigmoid activation
should not be applied. The data type for the targets should be torch_float32.}

\item{alpha}{Alpha parameter for false positives in Tversky calculation. This
is ignored if Dice is calculated. The default is 0.5.}

\item{beta}{Beta parameter for false negatives in Tversky calculation. This
is ignored if Dice is calculated. The default is 0.5}

\item{gamma}{Gamma parameter if Focal Tversky or Focal Dice is calculated.
Ignored if focal loss is not used. Default is 1.}

\item{average}{Either "micro" or "macro". Class averaging method applied for
multiclass classification. If "micro", classes are weighted relative to their
abundance in the target data. If "macro", classes are equally weighted in the
calculation. Default is "micro".}

\item{tversky}{TRUE or FALSE. Whether to calculate Tversky as opposed to Dice
loss. If TRUE, Tversky is calculated. If FALSE, Dice is calculated. Default is FALSE.}

\item{focal}{TRUE or FALSE. Whether to calculate a Focal Dice or Focal Tversky loss.
If FALSE, the gamma parameter is ignored. Default is FALSE.}

\item{combo}{TRUE or FALSE. Whether to calculate a combo loss using Dice/Tversky +
binary entropy/cross entropy. If TRUE, a combo loss is calculated. If FALSE, a
combo loss is not calculated. Default is FALSE.}

\item{useWghts}{TRUE or FALSE. Default is FALSE. If TRUE, class weights will be applied
in the calculation of cross entropy loss and macro-average Dice or Tversky loss. This setting
does not impact micro-averaged Dice or Tversky loss. If TRUE, the wght argument must be specified.}

\item{ceWght}{If combo is TRUE, defines relative weighting of binary cross entropy/
cross entropy in the loss as (Dice/Tversky) + ceWght*(binary cross entropy/
cross entropy). Ignored if combo is FALSE. Default is 1, or equal weighting in
the calculation between the two losses.}

\item{chnDim}{TRUE or FALSE. Default is TRUE. If TRUE, assumes the target tensor includes the
channel dimension: (Batch, Channel, Height, Width). If FALSE, assumes the target tensor does not include the
channel dimension: (Channel, Height, Width). The script is written such that it expects the channel dimension.
So, if FALSE, the script will add the channel dimension as needed.}

\item{mskLong}{TRUE or FALSE. Default is TRUE. Data type of target or mask. If the provided target
has a data type other than torch_long, this parameter should be set to FALSE. This will cause the
script to convert the target to the tensor_long data type as required for the calculations.}

\item{wght}{TRUE or FALSE. Default is FALSE. Must be defined if useWhgts is TRUE. A vector of class
weights must be provided that has the same length as the number of classes. The vector is converted to
a torch tensor within the script.}
}
\value{
Loss metric for us in training process.
}
\description{
Define a loss metric for binary or multiclass classification based on Dice (function-based).
}
\details{
Allows for defining a Dice-based loss metric including Dice, Focal Dice,
Tversky, Focal Tversky, or a combo loss that combines Dice or Tversky loss
with binary cross entropy or cross entropy loss. This is a functional implementation
that is called internally in the defineDiceFamilyLoss() class-based implementation.
}
